generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Credit tracking
  creditBalance     Float     @default(0)
  firstTokenAt      DateTime?
  promotionEligible Boolean   @default(true)
  promotionClaimed  Boolean   @default(false)

  // Relations
  accounts  Account[]
  sessions  Session[]
  inferences InferenceRequest[]
  credits   Credit[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model InferenceRequest {
  id          String   @id @default(cuid())
  userId      String
  model       String
  prompt      String   @db.Text
  response    String?  @db.Text
  maxTokens   Int      @default(100)
  temperature Float    @default(0.7)
  tokensUsed  Int?
  latencyMs   Int?
  status      InferenceStatus @default(PENDING)
  createdAt   DateTime @default(now())
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("inference_requests")
}

enum Role {
  ADMIN
  USER
}

enum InferenceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Credit {
  id          String      @id @default(cuid())
  userId      String
  amount      Float
  type        CreditType
  description String
  appliedAt   DateTime    @default(now())
  expiresAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

enum CreditType {
  PROMOTIONAL
  PURCHASED
  REFUND
  ADJUSTMENT
}